function gui
    f = figure(...
        'Name', 'Genaxel Simulation GUI', ...
        'Position', [300 100 700 600]);

    %%% --- Left side: Strategy list and Sim Mode --- %%%
    uicontrol(f, ...
        'Style', 'text', ...
        'Position', [5 560 150 20], ...
        'String', 'Selected Strategies:');
    
    stratListBox = uicontrol(f, ...
        'Style', 'listbox', ...
        'Position', [20 430 250 130], ...
        'Max', 2);

    deleteBtn = uicontrol(f, ...
        'Style', 'pushbutton', ...
        'String', 'Delete Selected', ...
        'Position', [20 400 120 25], ...
        'Callback', @deleteStrategy);

    uicontrol(f, ...
        'Style', 'text', ...
        'String', 'Sim Mode:', ...
        'Position', [5 370 100 20]);

    simModeMenu = uicontrol(f, ...
        'Style', 'popupmenu', ...
        'String', {'TourTheFit', 'TourSimImit', 'TourSimFit', 'Axel'}, ...
        'Position', [20 350 200 20], ...
        'Callback', @toggleFields);

    %%% --- Right side: Strategy adding --- %%%
    strategyList = {...
        '1: Random', ...
        '2: Cooperate', ...
        '3: Defect', ...
        '4: Grim', ...
        '5: Tit-for-tat', ...
        '6: Hard Tit-for-tat', ...
        '7: Slow Tit-for-tat', ...
        '8: Tit-for-two-tat', ...
        '9: Soft Majority', ...
        '10: Periodic CD', ...
        '11: Periodic Kind', ...
        '12: Periodic Nasty', ...
        '13: Gradual', ...
        '14: Pavlov', ...
        '15: Mistrust', ...
        '16: Periodic Ultra Kind', ... 
        '17: Prober'};

    uicontrol(f, ...
        'Style', 'text', ...
        'Position', [288 560 120 20], ...
        'String', 'Select Strategy:');

    strategyMenu = uicontrol(f, ...
        'Style', 'popupmenu', ...
        'String', strategyList, ...
        'Position', [300 540 200 20]);

    uicontrol(f, ...
        'Style', 'text', ...
        'Position', [500 560 100 20], ...
        'String', 'Population:');
    popInput = uicontrol(f, ...
        'Style', 'edit', ...
        'Position', [515 540 60 20], ...
        'String', '10');

    addBtn = uicontrol(f, ...
        'Style', 'pushbutton', ...
        'String', 'Add strategy +', ...
        'Position', [585 540 100 25], ...
        'Callback', @addStrategy);

    %%% --- Payoff matrix --- %%%
    uicontrol(f, ...
        'Style', 'text', ...
        'Position', [270 500 200 20], ...
        'String', 'Payoff Matrix [R,S;T,P]:');
    payoffTable = uitable(f, ...
        'Data', [3 0; 5 1], ...
        'Position', [300 435 153 65], ...
        'ColumnEditable', [true true], ...
        'ColumnWidth', {60, 60});

    %%% --- Rounds, Generations and K --- %%%
    uicontrol(f, ...
        'Style', 'text', ...
        'String', 'Rounds:', ...
        'Position', [278 410 100 20]);
    roundsBox = uicontrol(f, ...
        'Style', 'edit', ...
        'Position', [300 390 60 20], ...
        'String', '100');

    uicontrol(f, ...
        'Style', 'text', ...
        'String', 'Generations:', ...
        'Position', [370 410 100 20]);
    gensBox = uicontrol(f, ...
        'Style', 'edit', ...
        'Position', [380 390 80 20], ...
        'String', '90');

    kLabel = uicontrol(f, ...
        'Style', 'text', ...
        'String', 'Imitators (K):', ...
        'Position', [470 410 100 20], ...
        'Visible', 'off');
    kBox = uicontrol(f, ...
        'Style', 'edit', ...
        'Position', [480 390 70 20], ...
        'String', '5', ...
        'Visible', 'off');

    %%% --- Rounding --- %%%
    roundingLabel = uicontrol(f, ...
        'Style', 'text', ...
        'String', 'Rounding:', ...
        'Position', [285 360 100 20], ...
        'Visible', 'on');
    roundingMenu = uicontrol(f, ...
        'Style', 'popupmenu', ...
        'String', {'paper', 'pop', 'dec', 'off'}, ...
        'Position', [300 340 120 20], ...
        'Visible', 'on');

    %%% --- Run button --- %%%
    uicontrol(f, ...
        'Style', 'pushbutton', ...
        'Position', [250 280 200 40], ...
        'String', 'Run Simulation', ...
        'Callback', @runSim);

    % State variables
    strategyIDs = [];
    populationSizes = [];

    function addStrategy(~, ~)
        idx = get(strategyMenu, 'Value');
        pop = str2double(get(popInput, 'String'));
        if isnan(pop) || pop <= 0
            errordlg('Invalid population value.');
            return;
        end
        strategyIDs(end+1) = idx;
        populationSizes(end+1) = pop;
        updateListbox();
    end

    function deleteStrategy(~, ~)
        selected = get(stratListBox, 'Value');
        strategyIDs(selected) = [];
        populationSizes(selected) = [];
        updateListbox();
    end

    function updateListbox()
        entries = arrayfun(@(s, p) sprintf('%s -> %d', strategyList{s}, p), ...
            strategyIDs, populationSizes, 'UniformOutput', false);
        set(stratListBox, 'String', entries, 'Value', 1);
    end

    function toggleFields(~, ~)
        mode = get(simModeMenu, 'Value');
        switch mode
            case 1 % TourTheFit
                set(roundingLabel, 'Visible', 'on');
                set(roundingMenu, 'Visible', 'on');
                set(kLabel, 'Visible', 'off');
                set(kBox, 'Visible', 'off');
            case 2 % TourSimImit
                set(roundingLabel, 'Visible', 'off');
                set(roundingMenu, 'Visible', 'off');
                set(kLabel, 'Visible', 'on');
                set(kBox, 'Visible', 'on');
            case 3 % TourSimFit
                set(roundingLabel, 'Visible', 'on');
                set(roundingMenu, 'Visible', 'on');
                set(kLabel, 'Visible', 'off');
                set(kBox, 'Visible', 'off');
            otherwise
                set(roundingLabel, 'Visible', 'off');
                set(roundingMenu, 'Visible', 'off');
                set(kLabel, 'Visible', 'off');
                set(kBox, 'Visible', 'off');
        end
    end

    function runSim(~, ~)
        if isempty(strategyIDs)
            errordlg('Please add at least one strategy.');
            return;
        end

        addpath('Code/Genaxel/strategies');
        addpath('Code/Genaxel');

        strategiesArray = strategyIDs;
        populationsArray = populationSizes;
        matrix = get(payoffTable, 'Data');
        rounds = str2double(get(roundsBox, 'String'));
        generations = str2double(get(gensBox, 'String'));
        simModes = get(simModeMenu, 'String');
        sim_mode = simModes{get(simModeMenu, 'Value')};
        roundingOptions = get(roundingMenu, 'String');
        rounding = roundingOptions{get(roundingMenu, 'Value')};
        K = str2double(get(kBox, 'String'));

        switch sim_mode
            case "TourTheFit"
                TourTheFit(matrix, strategiesArray, populationsArray, rounds, generations, rounding);
            case "TourSimImit"
                TourSimImit(matrix, strategiesArray, populationsArray, K, rounds, generations);
            case "TourSimFit"
                TourSimFit(matrix, strategiesArray, populationsArray, rounds, generations);
            case "Axel"
                Axel(strategiesArray, populationsArray, matrix, rounds);
            otherwise
                errordlg('Invalid simulation mode.');
        end
    end
end